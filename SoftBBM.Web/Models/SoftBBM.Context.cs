//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SoftBBM.Web.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class SoftBBMDbContext : DbContext
    {
        public SoftBBMDbContext()
            : base("name=SoftBBMDbContext")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<admin> admins { get; set; }
        public virtual DbSet<admin_role> admin_role { get; set; }
        public virtual DbSet<cart> carts { get; set; }
        public virtual DbSet<donhang_chuyenphat_danhsachdiachifuta> donhang_chuyenphat_danhsachdiachifuta { get; set; }
        public virtual DbSet<donhang_chuyenphat_tp_tinhtra> donhang_chuyenphat_tp_tinhtra { get; set; }
        public virtual DbSet<donhang_gio_giaohang> donhang_gio_giaohang { get; set; }
        public virtual DbSet<donhang_chuyenphat_tinh> donhang_chuyenphat_tinh { get; set; }
        public virtual DbSet<donhang_chuyenphat_tp> donhang_chuyenphat_tp { get; set; }
        public virtual DbSet<donhang_chuyenphat_vung> donhang_chuyenphat_vung { get; set; }
        public virtual DbSet<khachhang_lienhe> khachhang_lienhe { get; set; }
        public virtual DbSet<khachhang_vanglai> khachhang_vanglai { get; set; }
        public virtual DbSet<module_detail> module_detail { get; set; }
        public virtual DbSet<module_group> module_group { get; set; }
        public virtual DbSet<module_menu> module_menu { get; set; }
        public virtual DbSet<shop_danhmuc_group> shop_danhmuc_group { get; set; }
        public virtual DbSet<shop_page> shop_page { get; set; }
        public virtual DbSet<shop_plan_saleoff> shop_plan_saleoff { get; set; }
        public virtual DbSet<shop_plan_type> shop_plan_type { get; set; }
        public virtual DbSet<shop_showhome> shop_showhome { get; set; }
        public virtual DbSet<shop_bienthe> shop_bienthe { get; set; }
        public virtual DbSet<shop_collection> shop_collection { get; set; }
        public virtual DbSet<shop_danhmuc> shop_danhmuc { get; set; }
        public virtual DbSet<shop_danhmuccon> shop_danhmuccon { get; set; }
        public virtual DbSet<shop_image> shop_image { get; set; }
        public virtual DbSet<shop_loai> shop_loai { get; set; }
        public virtual DbSet<shop_phanloai_dotuoi> shop_phanloai_dotuoi { get; set; }
        public virtual DbSet<shop_rightcol> shop_rightcol { get; set; }
        public virtual DbSet<shop_sanphamStatus> shop_sanphamStatus { get; set; }
        public virtual DbSet<shop_thuonghieu> shop_thuonghieu { get; set; }
        public virtual DbSet<support_cauhoi> support_cauhoi { get; set; }
        public virtual DbSet<support_feedback> support_feedback { get; set; }
        public virtual DbSet<support_silder> support_silder { get; set; }
        public virtual DbSet<support_textlink> support_textlink { get; set; }
        public virtual DbSet<sys_Banner> sys_Banner { get; set; }
        public virtual DbSet<sys_content> sys_content { get; set; }
        public virtual DbSet<sys_Employee> sys_Employee { get; set; }
        public virtual DbSet<sys_mail> sys_mail { get; set; }
        public virtual DbSet<sys_tags_Ref> sys_tags_Ref { get; set; }
        public virtual DbSet<sys_tags_Summary> sys_tags_Summary { get; set; }
        public virtual DbSet<sys_account_admin> sys_account_admin { get; set; }
        public virtual DbSet<sys_bangtin_conhang> sys_bangtin_conhang { get; set; }
        public virtual DbSet<sys_file> sys_file { get; set; }
        public virtual DbSet<sys_imagetype> sys_imagetype { get; set; }
        public virtual DbSet<sys_nhanbangtin> sys_nhanbangtin { get; set; }
        public virtual DbSet<ApplicationRoleGroup> ApplicationRoleGroups { get; set; }
        public virtual DbSet<ApplicationUserGroup> ApplicationUserGroups { get; set; }
        public virtual DbSet<ApplicationUserRole> ApplicationUserRoles { get; set; }
        public virtual DbSet<ApplicationUserSoftBranch> ApplicationUserSoftBranches { get; set; }
        public virtual DbSet<ApplicationGroup> ApplicationGroups { get; set; }
        public virtual DbSet<ApplicationUser> ApplicationUsers { get; set; }
        public virtual DbSet<ApplicationRole> ApplicationRoles { get; set; }
        public virtual DbSet<ApplicationRoleCategory> ApplicationRoleCategories { get; set; }
        public virtual DbSet<khachhang> khachhangs { get; set; }
        public virtual DbSet<shop_sanphamCategories> shop_sanphamCategories { get; set; }
        public virtual DbSet<SoftAdjustmentStockDetail> SoftAdjustmentStockDetails { get; set; }
        public virtual DbSet<SoftAdjustmentStock> SoftAdjustmentStocks { get; set; }
        public virtual DbSet<SoftBranch> SoftBranches { get; set; }
        public virtual DbSet<SoftBranchProductStock> SoftBranchProductStocks { get; set; }
        public virtual DbSet<SoftChannelProductPrice> SoftChannelProductPrices { get; set; }
        public virtual DbSet<SoftChannel> SoftChannels { get; set; }
        public virtual DbSet<SoftNotification> SoftNotifications { get; set; }
        public virtual DbSet<SoftOrderDetail> SoftOrderDetails { get; set; }
        public virtual DbSet<SoftOrder> SoftOrders { get; set; }
        public virtual DbSet<SoftReturnSupplierDetail> SoftReturnSupplierDetails { get; set; }
        public virtual DbSet<SoftReturnSupplier> SoftReturnSuppliers { get; set; }
        public virtual DbSet<SoftStockInCategory> SoftStockInCategories { get; set; }
        public virtual DbSet<SoftStockInStatu> SoftStockInStatus { get; set; }
        public virtual DbSet<SoftSupplier> SoftSuppliers { get; set; }
        public virtual DbSet<SoftSupplierVatStatu> SoftSupplierVatStatus { get; set; }
        public virtual DbSet<SoftStockInPaymentMethod> SoftStockInPaymentMethods { get; set; }
        public virtual DbSet<SoftStockInPaymentType> SoftStockInPaymentTypes { get; set; }
        public virtual DbSet<SoftStockInPaymentStatus> SoftStockInPaymentStatuses { get; set; }
        public virtual DbSet<shop_sanphamLogs> shop_sanphamLogs { get; set; }
        public virtual DbSet<shop_sanpham> shop_sanpham { get; set; }
        public virtual DbSet<SoftPointUpdateLog> SoftPointUpdateLogs { get; set; }
        public virtual DbSet<donhang_ct> donhang_ct { get; set; }
        public virtual DbSet<SystemLog> SystemLogs { get; set; }
        public virtual DbSet<donhangStatu> donhangStatus { get; set; }
        public virtual DbSet<SoftOrderStatu> SoftOrderStatus { get; set; }
        public virtual DbSet<SoftOfflineOrderWindow> SoftOfflineOrderWindows { get; set; }
        public virtual DbSet<SoftStockInDetail> SoftStockInDetails { get; set; }
        public virtual DbSet<SoftStockIn> SoftStockIns { get; set; }
        public virtual DbSet<donhang> donhangs { get; set; }
    
        public virtual int TinTuc_Phantrang(Nullable<int> currPage, Nullable<int> recodperpage, Nullable<int> pagesize, Nullable<int> cateID, string page)
        {
            var currPageParameter = currPage.HasValue ?
                new ObjectParameter("currPage", currPage) :
                new ObjectParameter("currPage", typeof(int));
    
            var recodperpageParameter = recodperpage.HasValue ?
                new ObjectParameter("recodperpage", recodperpage) :
                new ObjectParameter("recodperpage", typeof(int));
    
            var pagesizeParameter = pagesize.HasValue ?
                new ObjectParameter("Pagesize", pagesize) :
                new ObjectParameter("Pagesize", typeof(int));
    
            var cateIDParameter = cateID.HasValue ?
                new ObjectParameter("CateID", cateID) :
                new ObjectParameter("CateID", typeof(int));
    
            var pageParameter = page != null ?
                new ObjectParameter("page", page) :
                new ObjectParameter("page", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TinTuc_Phantrang", currPageParameter, recodperpageParameter, pagesizeParameter, cateIDParameter, pageParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual ObjectResult<spTB_DangNhap_TruyVanTheoTenDangNhap_Result> spTB_DangNhap_TruyVanTheoTenDangNhap(string tenDangNhap)
        {
            var tenDangNhapParameter = tenDangNhap != null ?
                new ObjectParameter("TenDangNhap", tenDangNhap) :
                new ObjectParameter("TenDangNhap", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spTB_DangNhap_TruyVanTheoTenDangNhap_Result>("spTB_DangNhap_TruyVanTheoTenDangNhap", tenDangNhapParameter);
        }
    
        public virtual int usp_Poll_delete(Nullable<int> pollID)
        {
            var pollIDParameter = pollID.HasValue ?
                new ObjectParameter("PollID", pollID) :
                new ObjectParameter("PollID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Poll_delete", pollIDParameter);
        }
    
        public virtual int usp_Poll_getActive()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Poll_getActive");
        }
    
        public virtual int usp_Poll_getRandomActive()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Poll_getRandomActive");
        }
    
        public virtual int usp_Poll_insert(string question, string blockMode, Nullable<bool> active, Nullable<int> maloai)
        {
            var questionParameter = question != null ?
                new ObjectParameter("Question", question) :
                new ObjectParameter("Question", typeof(string));
    
            var blockModeParameter = blockMode != null ?
                new ObjectParameter("BlockMode", blockMode) :
                new ObjectParameter("BlockMode", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var maloaiParameter = maloai.HasValue ?
                new ObjectParameter("maloai", maloai) :
                new ObjectParameter("maloai", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Poll_insert", questionParameter, blockModeParameter, activeParameter, maloaiParameter);
        }
    
        public virtual int usp_Poll_list()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Poll_list");
        }
    
        public virtual int usp_Poll_select(Nullable<int> pollID)
        {
            var pollIDParameter = pollID.HasValue ?
                new ObjectParameter("PollID", pollID) :
                new ObjectParameter("PollID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Poll_select", pollIDParameter);
        }
    
        public virtual int usp_Poll_select1(Nullable<int> pollID)
        {
            var pollIDParameter = pollID.HasValue ?
                new ObjectParameter("PollID", pollID) :
                new ObjectParameter("PollID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Poll_select1", pollIDParameter);
        }
    
        public virtual int usp_Poll_update(Nullable<int> pollID, string question, string blockMode, Nullable<bool> active, Nullable<int> maloai)
        {
            var pollIDParameter = pollID.HasValue ?
                new ObjectParameter("PollID", pollID) :
                new ObjectParameter("PollID", typeof(int));
    
            var questionParameter = question != null ?
                new ObjectParameter("Question", question) :
                new ObjectParameter("Question", typeof(string));
    
            var blockModeParameter = blockMode != null ?
                new ObjectParameter("BlockMode", blockMode) :
                new ObjectParameter("BlockMode", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var maloaiParameter = maloai.HasValue ?
                new ObjectParameter("maloai", maloai) :
                new ObjectParameter("maloai", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Poll_update", pollIDParameter, questionParameter, blockModeParameter, activeParameter, maloaiParameter);
        }
    
        public virtual int usp_PollChoices_delete(Nullable<int> pollChoiceID)
        {
            var pollChoiceIDParameter = pollChoiceID.HasValue ?
                new ObjectParameter("PollChoiceID", pollChoiceID) :
                new ObjectParameter("PollChoiceID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_PollChoices_delete", pollChoiceIDParameter);
        }
    
        public virtual int usp_PollChoices_insert(Nullable<int> pollID, string choice)
        {
            var pollIDParameter = pollID.HasValue ?
                new ObjectParameter("PollID", pollID) :
                new ObjectParameter("PollID", typeof(int));
    
            var choiceParameter = choice != null ?
                new ObjectParameter("Choice", choice) :
                new ObjectParameter("Choice", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_PollChoices_insert", pollIDParameter, choiceParameter);
        }
    
        public virtual int usp_PollChoices_update(Nullable<int> pollChoiceID, string choice)
        {
            var pollChoiceIDParameter = pollChoiceID.HasValue ?
                new ObjectParameter("PollChoiceID", pollChoiceID) :
                new ObjectParameter("PollChoiceID", typeof(int));
    
            var choiceParameter = choice != null ?
                new ObjectParameter("Choice", choice) :
                new ObjectParameter("Choice", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_PollChoices_update", pollChoiceIDParameter, choiceParameter);
        }
    
        public virtual int usp_PollChoices_vote(Nullable<int> pollChoiceID)
        {
            var pollChoiceIDParameter = pollChoiceID.HasValue ?
                new ObjectParameter("PollChoiceID", pollChoiceID) :
                new ObjectParameter("PollChoiceID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_PollChoices_vote", pollChoiceIDParameter);
        }
    
        public virtual int usp_PollIPs_insert(Nullable<int> pollID, string iPAddress)
        {
            var pollIDParameter = pollID.HasValue ?
                new ObjectParameter("PollID", pollID) :
                new ObjectParameter("PollID", typeof(int));
    
            var iPAddressParameter = iPAddress != null ?
                new ObjectParameter("IPAddress", iPAddress) :
                new ObjectParameter("IPAddress", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_PollIPs_insert", pollIDParameter, iPAddressParameter);
        }
    
        public virtual int usp_PollIPs_select(Nullable<int> pollID, string iPAddress)
        {
            var pollIDParameter = pollID.HasValue ?
                new ObjectParameter("PollID", pollID) :
                new ObjectParameter("PollID", typeof(int));
    
            var iPAddressParameter = iPAddress != null ?
                new ObjectParameter("IPAddress", iPAddress) :
                new ObjectParameter("IPAddress", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_PollIPs_select", pollIDParameter, iPAddressParameter);
        }
    }
}
